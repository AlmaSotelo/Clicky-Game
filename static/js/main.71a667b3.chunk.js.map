{"version":3,"sources":["components/Main/index.js","components/Navbar/index.js","components/Header/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","react_default","a","createElement","className","children","Navbar","href","alerts","currentScore","topScore","Header","Card","onClick","clickedCard","id","alt","src","image","shuffleArray","array","i","length","j","Math","floor","random","temp","shuffledCards","cards","App","state","console","log","clicked","selectedCard","index","_this","setState","_this2","this","components_Navbar","components_Main","components_Header","map","card","components_Card","key","name","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71a667b3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Main(props) {\r\n  return <div className=\"main\">{props.children}</div>;\r\n}\r\n\r\nexport default Main;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n   return (\r\n    <div className='navbar navbar-dark bg-dark font-weight-bold sticky-top'>\r\n      <div className='col-md-4 text-center'><a href='/'>Start over</a></div>\r\n      <div className='col-md-4 text-center'>{props.alerts}</div>\r\n      <div className='col-md-4 text-center'>\r\n      Current Score: {props.currentScore} |\r\n      Top Score: {props.topScore}</div>\r\n    </div>\r\n  );\r\n}; \r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(){\r\n    return(\r\n        <div className='text-center banner'>\r\n            <h2>Click on a card to earn points, but don't click on any image more than once!</h2>\r\n        </div>);\r\n};\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props){\r\n    return(\r\n        \r\n        <div className=\"col-md-2 card-container\" onClick={()=>props.clickedCard(props.id)}>\r\n                <img className=\"img-thumbnail\" alt={props.id} src={\"./images/\"+props.image}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","// export default ImgCard;\nimport React, { Component } from 'react';\nimport cards from \"./cards.json\";\nimport Main from \"./components/Main\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Card from \"./components/Card\";\n\nlet alerts='Welcome to the Clicky-Game!';\nlet currentScore=0;\nlet topScore=0;\n\nfunction shuffleArray(array) {\n   let i = array.length - 1;\n   for (; i > 0; i--) {\n     const j = Math.floor(Math.random() * (i + 1));\n     const temp = array[i];\n     array[i] = array[j];\n     array[j] = temp;\n   }\n   return array;\n}\n \nlet shuffledCards=shuffleArray(cards);\n \nclass App extends Component {\n \n   state = {\n     shuffledCards\n   };\n   clickedCard=id=>{\n      console.log(\"id: \"+id);\n      console.log(\"clicked: \"+shuffledCards[id-1].clicked)\n      let selectedCard={};\n      let index=0;\n      for(var i=0;i<shuffledCards.length;i++){\n        if(shuffledCards[i].id===id){\n          selectedCard=shuffledCards[i];\n          index=i;\n          console.log(\"selected card: \"+selectedCard.clicked);\n          console.log(\"shuffledCards: \"+shuffledCards)\n        }\n      }\n      if(!selectedCard.clicked){\n        alerts='You guessed correctly!';\n        shuffledCards[(id-1)].clicked=true;\n        shuffledCards[index].clicked=true;\n        currentScore++;\n        if(currentScore>=topScore){\n        topScore=currentScore;}\n        shuffledCards=shuffleArray(shuffledCards);\n        this.setState(shuffledCards);\n        if(currentScore===shuffledCards.length){\n          for(i=0;i<shuffledCards.length;i++){\n            shuffledCards[i].clicked=false;\n          }\n          alerts=\"Well done! You win. Click on any card to start again!\";\n          currentScore=0;\n        }\n        \n      }\n      else{\n        //endGame\n        for(i=0;i<shuffledCards.length;i++){\n          shuffledCards[i].clicked=false;\n        }\n        //instruction='You guessed incorrectly!';\n        currentScore=0;\n        shuffledCards=shuffleArray(shuffledCards);\n        alerts='You have lost! Click on any card to start again!';\n        this.setState(shuffledCards);\n      }\n    };\n    render() {\n      return (\n         <div>\n            <Navbar\n               alerts={alerts}\n               currentScore={currentScore}\n               topScore={topScore} >\n            </Navbar>\n            <Main>\n               <Header>\n               </Header>   \n                  {this.state.shuffledCards.map(card => (\n                     <Card\n                        id={card.id}\n                        key={card.id}\n                        name={card.name}\n                        image={card.image}\n                        clicked={card.clicked}\n                        clickedCard={this.clickedCard}  />\n                  ))}\n            </Main>\n         </div>\n      );\n    }\n  }\n  \n  export default App;   \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}